{
  "name": "Testcafe",
  "tagline": "Automated browser testing for the modern web development stack.",
  "body": "<h1 align=\"center\">\r\n    <a href=\"https://devexpress.github.io/testcafe\">\r\n        <img src=\"https://raw.github.com/DevExpress/testcafe/master/media/logo.png\" alt=\"testcafe\" />\r\n    </a>\r\n</h1>\r\n<p align=\"center\">\r\n<a href=\"https://devexpress.github.io/testcafe\">https://devexpress.github.io/testcafe</a>\r\n</p>\r\n<p align=\"center\">\r\n<i>Automated browser testing for the modern web development stack.</i>\r\n</p>\r\n\r\n<p align=\"center\">\r\n<a href=\"https://ci.appveyor.com/project/DevExpress/testcafe\"><img alt=\"Functional Windows desktop\" src=\"https://ci.appveyor.com/api/projects/status/ftelkyuiji8lyadf?svg=true\"></a>\r\n<a href=\"https://travis-ci.org/DevExpress/testcafe\"><img alt=\"All Travis tasks (server, client, functional: mobile, macOS, Edge)\" src=\"https://travis-ci.org/DevExpress/testcafe.svg\"></a>\r\n<a href=\"https://www.npmjs.com/package/testcafe\"><img alt=\"NPM Version\" src=\"https://img.shields.io/npm/v/testcafe.svg\" data-canonical-src=\"https://img.shields.io/npm/v/testcafe.svg\" style=\"max-width:100%;\"></a>\r\n</p>\r\n\r\n----\r\n\r\nTestCafe is a pure node.js end-to-end solution for testing web apps. It takes care of all the stages: starting browsers, running tests, gathering test results and generating reports. TestCafe doesnâ€™t need browser plugins - it works in all popular modern browsers out-of-the-box.\r\n\r\n![Install TestCafe and Run a Test](https://raw.githubusercontent.com/DevExpress/testcafe/master/media/install-and-run-test.gif)\r\n\r\n* [Features](#features)\r\n* [Getting Started](#getting-started)\r\n* [Documentation](#documentation)\r\n* [Roadmap](#roadmap)\r\n* [Contributing](#contributing)\r\n* [Stay in Touch](#stay-in-touch)\r\n* [License](#license)\r\n* [Author](#author)\r\n\r\n## Features\r\n\r\n### Easy Install\r\n\r\nEverything is included in a single module installed with one command.\r\n\r\n```bash\r\nnpm install -g testcafe\r\n```\r\n\r\nNo native parts to compile, no browsers plugins to install.\r\n\r\n### Complete Test Harness\r\n\r\nTestCafe automatically starts browsers, runs tests and gathers results. You only type a single command to begin testing.\r\n\r\n```bash\r\ntestcafe chrome tests/\r\n```\r\n\r\nWhen testing is finished, TestCafe aggregates test results from different browsers and outputs them into one comprehensive report.\r\n\r\n### Write Test Code Using ES2016\r\n\r\nYou can write TestCafe tests in ES2016 using the latest JavaScript features like `async/await`.\r\n\r\n[Test API](https://devexpress.github.io/testcafe/documentation/test-api/index.html) consists of over two dozen methods that can emulate all actions one could possibly do with a webpage.\r\nChained syntax allows for code that is easy to write and read.\r\n\r\n```js\r\nimport { expect } from 'chai';\r\n\r\nfixture `Example page`\r\n    .page `https://devexpress.github.io/testcafe/example`;\r\n\r\ntest('Emulate user actions and perform a verification', async t => {\r\n    await t\r\n        .setNativeDialogHandler(() => true)\r\n        .click('#populate')\r\n        .click('#submit-button');\r\n\r\n    const location = await t.eval(() => window.location);\r\n\r\n    expect(location.pathname).eql('/testcafe/example/thank-you.html');\r\n});\r\n```\r\n\r\nAdditionally, TestCafe automatically generates source maps for easy debugging.\r\nTo debug your test code, start a debugging session in an IDE that supports source maps.\r\n\r\n### Direct Access to Page Elements\r\n\r\nTestCafe allows you to access webpage elements using standard CSS selectors or [custom selectors](https://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/selectors.html) that run client JavaScript code.\r\nYou can call a custom selector as a regular function within your test.\r\nIt will execute your code on the client and pass the returned value back to the test.\r\nThis allows you to determine the state of each element on the tested page or select a proper element to perform an action on.\r\n\r\n```js\r\nimport { expect } from 'chai';\r\nimport { Selector } from 'testcafe';\r\n\r\nconst elementWithId = Selector(id => document.querySelector(`#${id}`));\r\n\r\nfixture `Example page`\r\n    .page `https://devexpress.github.io/testcafe/example`;\r\n\r\ntest('Type the developer name, obtain the header text and check it', async t => {\r\n    await t\r\n        .typeText('#developer-name', 'John Smith')\r\n        .click('#submit-button');\r\n\r\n    const headerText = await elementWithId('article-header').innerText;\r\n\r\n    expect(headerText).to.equal('Thank you, John!');\r\n});\r\n```\r\n\r\n### No Extra Coding\r\n\r\nWrite tests without boilerplate code.\r\n\r\n* TestCafe automatically waits for page loads and XHRs to complete, as well as for DOM elements to become visible. You do not need to write custom code for that.\r\n* Test runs are isolated, which means that they do not share cookies, local or session storages. There is nothing to clean up between test runs.\r\n\r\n### Descriptive Reports\r\n\r\nTestCafe automatically generates full-detailed reports that provide a test run summary and comprehensive information about errors.\r\nAutomatic page screenshots, fancy call sites and call stacks free of TestCafe internals allow you to easily detect error causes.\r\n\r\nUse one of [built-in reporters](https://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/reporters.html) to output test results or [create your own one](https://devexpress.github.io/testcafe/documentation/extending-testcafe/reporter-plugin/) to produce custom reports.\r\n\r\n![Spec Report](docs/articles/images/spec-report.png)\r\n\r\n### Straightforward Continuous Integration\r\n\r\nTestCafe is easy to set up on popular Continuous Integration platforms as it allows you to test against various browsers: local, remote or cloud (e.g., [Sauce Labs](https://saucelabs.com/)).\r\nYou can also create a custom [browser provider](https://devexpress.github.io/testcafe/documentation/extending-testcafe/browser-provider-plugin/index.html) to add support for a browser or a cloud platform of your choice.\r\n\r\n## Getting Started\r\n\r\n### Installing TestCafe\r\n\r\nEnsure that [Node.js](https://nodejs.org/) and [npm](https://www.npmjs.com/) are installed on your computer, then run a single command:\r\n\r\n```bash\r\nnpm install -g testcafe\r\n```\r\n\r\nFor more information, see [Installing TestCafe](https://devexpress.github.io/testcafe/documentation/using-testcafe/installing-testcafe.html).\r\n\r\n### Creating a Test\r\n\r\nTo create a test, create a new .js file anywhere on your computer.\r\nThis file must have a special structure: tests must be organized into fixtures. Thus, begin by declaring a fixture using the [fixture](https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#fixtures) function.\r\n\r\n```js\r\nfixture `Getting Started`\r\n```\r\n\r\nIn this tutorial, you will create a test for the [https://devexpress.github.io/testcafe/example](https://devexpress.github.io/testcafe/example) sample page.\r\nSpecify this page as a start page for the fixture by using the [page](https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#specifying-the-start-webpage) function.\r\n\r\n```js\r\nfixture `Getting Started`\r\n    .page `https://devexpress.github.io/testcafe/example`;\r\n```\r\n\r\nThen, create the [test](https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#tests) function where you will place test code.\r\n\r\n```js\r\nfixture `Getting Started`\r\n    .page `https://devexpress.github.io/testcafe/example`;\r\n\r\ntest('My first test', async t => {\r\n    // Test code\r\n});\r\n```\r\n\r\n### Running the Test\r\n\r\nYou can simply run the test from a command shell by calling a single command where you specify the [target browser](https://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html#browser-list) and [file path](https://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html#file-pathglob-pattern).\r\n\r\n```bash\r\ntestcafe chrome test1.js\r\n```\r\n\r\nTestCafe will automatically open the chosen browser and start test execution within it.\r\n\r\n> Important! Make sure to keep the browser tab that is running tests active. Do not minimize the browser window.\r\n> Inactive tabs and minimized browser windows switch to a lower resource consumption mode\r\n> where tests are not guaranteed to execute correctly.\r\n\r\nFor more information on how to configure the test run, see [Command Line Interface](https://devexpress.github.io/testcafe/documentation/using-testcafe/command-line-interface.html).\r\n\r\n### Viewing the Test Results\r\n\r\nWhile the test is running, TestCafe is gathering information about the test run and outputting the report right into a command shell.\r\n\r\n![Test Report](docs/articles/images/report.png)\r\n\r\nFor more information, see [Reporters](https://devexpress.github.io/testcafe/documentation/using-testcafe/common-concepts/reporters.html).\r\n\r\n### Writing Test Code\r\n\r\n#### Performing Actions on the Page\r\n\r\nEvery test should be capable of interacting with page content. To perform user actions, TestCafe provides\r\na number of [actions](https://devexpress.github.io/testcafe/documentation/test-api/actions/): `click`, `hover`, `typeText`, `setFilesToUpload`, etc.\r\nThey can be called in a chain.\r\n\r\nThe following fixture contains a simple test that types a developer name into a text editor and then clicks the Submit button.\r\n\r\n```js\r\nfixture `Getting Started`\r\n    .page `https://devexpress.github.io/testcafe/example`;\r\n\r\ntest('My first test', async t => {\r\n    await t\r\n        .typeText('#developer-name', 'John Smith')\r\n        .click('#submit-button');\r\n});\r\n```\r\n\r\nAll test actions are implemented as async functions of the [test controller object](https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#test-controller) `t`.\r\nThis object is used to access test run API.\r\nTo wait for actions to complete, use the `await` keyword when calling these actions or action chains.\r\n\r\n#### Observing Page State\r\n\r\nTestCafe allows you to observe the page state.\r\nFor this purpose, it offers special kinds of functions that will execute your code on the client:\r\n[Selector](https://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/selectors.html) used to get direct access to DOM elements\r\nand [ClientFunction](https://devexpress.github.io/testcafe/documentation/test-api/obtaining-data-from-the-client.html) used to obtain arbitrary data from the client side.\r\nYou call these functions as regular async functions, that is you can obtain their results and use parameters to pass data to them.\r\n\r\nFor example, clicking the Submit button on the sample web page opens a \"Thank you\" page.\r\nTo get access to DOM elements on the opened page, the `Selector` function can be used.\r\nThe following example demonstrates how to access the article header element and obtain its actual text.\r\n\r\n```js\r\nimport { Selector } from 'testcafe';\r\n\r\n// Declare the parameterized Selector function\r\n// to get access to a DOM element identified by the `id` attribute\r\nconst elementWithId = Selector(id => document.getElementById(id));\r\n\r\nfixture `Getting Started`\r\n    .page `https://devexpress.github.io/testcafe/example`;\r\n\r\ntest('My first test', async t => {\r\n    await t\r\n        .typeText('#developer-name', 'John Smith')\r\n        .click('#submit-button');\r\n\r\n    // Use the Selector function to get access to the article header\r\n    const articleHeader = await elementWithId('article-header');\r\n\r\n    // Obtain the text of the article header\r\n    let headerText = articleHeader.innerText;\r\n\r\n    // Or use a shorthand form to obtain article header text directly\r\n    headerText = await elementWithId('article-header').innerText;\r\n});\r\n```\r\n\r\nFor more information, see [Selecting Page Elements](https://devexpress.github.io/testcafe/documentation/test-api/selecting-page-elements/).\r\n\r\n#### Assertions\r\n\r\nA functional test also should check the result of actions performed.\r\nFor example, the article header on the \"Thank you\" page should address a user by the entered name.\r\nTo check if the header is correct, you have to add an assertion to the test.\r\n\r\nYou can use assertions from Node's built-in [assert](https://nodejs.org/api/assert.html) module or from any third-party assertion library.\r\nBefore calling assertions, make sure an assertion library is installed into your project.\r\n\r\nThe following test demonstrates how to use an assertion from [Chai Assertion Library](http://chaijs.com/api/bdd/).\r\nBefore running the test, install the assertion library by calling the `npm install --save-dev chai` command.\r\n\r\n```js\r\nimport { expect } from 'chai';\r\nimport { Selector } from 'testcafe';\r\n\r\n// Declare the parameterized selector function\r\n// to obtain text content of an element identified by the `id` attribute\r\nconst elementWithId = Selector(id => document.getElementById(id));\r\n\r\nfixture `Getting Started`\r\n    .page('https://devexpress.github.io/testcafe/example');\r\n\r\ntest('My first test', async t => {\r\n    await t\r\n        .typeText('#developer-name', 'John Smith')\r\n        .click('#submit-button');\r\n\r\n    // Use the Selector function to get access to the article header\r\n    const headerText = await elementWithId('article-header').innerText;\r\n\r\n    // Use the assertion to check if the actual header text is equal to the expected one\r\n    expect(headerText).to.equal('Thank you, John Smith!');\r\n});\r\n```\r\n\r\n## Documentation\r\n\r\n* [Test API](https://devexpress.github.io/testcafe/documentation/test-api/)\r\n* [Using TestCafe](https://devexpress.github.io/testcafe/documentation/using-testcafe/)\r\n* [Extending TestCafe](https://devexpress.github.io/testcafe/documentation/extending-testcafe/)\r\n* [Recipes](https://devexpress.github.io/testcafe/documentation/recipes/)\r\n\r\n## Roadmap\r\n\r\nWe plan to introduce other outstanding features so that you can test apps with even more efficiency.\r\nMeanwhile, you can help us improve TestCafe by voting for features on our [roadmap](https://github.com/DevExpress/testcafe/milestone/10).\r\n\r\n## Contributing\r\n\r\nPlease use our [issues page](https://github.com/DevExpress/testcafe/issues) to report a bug or request a feature.\r\n\r\nFor general purpose questions and discussions, use the [discussion board](https://testcafe-discuss.devexpress.com/).\r\n\r\nFor more information on how to help us improve TestCafe, please see the [CONTRIBUTING.md](CONTRIBUTING.md) file.\r\n\r\n## Stay in Touch\r\n\r\n* [Blog](https://devexpress.github.io/testcafe/blog/)\r\n* [Twitter](https://twitter.com/dxtestcafe)\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n## Author\r\n\r\nDeveloper Express Inc. ([https://devexpress.com](https://devexpress.com))\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}